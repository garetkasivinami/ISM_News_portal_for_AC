@model ISMNewsPortal.Models.CommentCreateModel

<h1>Comment</h1>
@using (Ajax.BeginForm("CreateComment", new { }, new AjaxOptions { 
    UpdateTargetId = "comments", 
    HttpMethod = "POST", 
    InsertionMode = InsertionMode.InsertBefore,
    OnSuccess = "SuccessNewComment()"
}, new {@id="comment-form"}))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.PageId)

        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control generateCharacterCount" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Text, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Text, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@Language.Language.Comment" class="btn btn-outline-dark" />
            </div>
        </div>
    </div>
}

<script>
    function SuccessNewComment() {
        let textareaField = document.querySelector("#Text");
        commentsCount.innerHTML = +commentsCount.innerHTML + 1;
        textareaField.value = '';
        window.location.href = '#commentsLine'
    }
</script>
<script src="~/Scripts/generator.js"></script>